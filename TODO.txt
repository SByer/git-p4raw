
 - the journals have @rv@ 'update' rows that the checkpoints don't.
   'load' needs to handle these, and ideally 'dump' wants to be able
   to write them out when rows change.

 - the change_parents table has a horrid denormalised JSON dump of
   impedence mismatches that is never recalculated unless you delete
   the change_parents row.

   Upon reflection, I think the only information I need to keep there
   to regenerate the merge conflict is the merge base, so I'll do away
   with that horrid beast first.

   so, the sub-TODO list for this is:

	- drop the json_info bits
	- create a table for merge_bases
	- create a function to find them for two changes (use PL/Perl?)
	- create a function to show the result of a three-way merge
	- create a function to compare the results of that with a
	  particular change

 - there are several queries which I wrote before I discovered SELECT
   DISTINCT ON (column, column) that should be rewritten (I discovered
   this perhaps a few days ago!).  In particular the views, defined in
   constraints.sql, use stupid NOT EXISTS () subqueries.  These must go.

 - No clean-up of the commit message from the information embedded in
   the Perl perforce repository is yet performed.  Need to extract the
   author information and change the Author field of the commit.  This
   is not a TODO for the general tool; people may just customise the
   make_commit() function for their site.

 - I used this command to 'recover' my change_marks / marks table:

git-log utsl/p4/lexwarn/perl utsl/p4/mainline/perl utsl/p4/maint-5.004/perl utsl/p4/oneperl utsl/p4/perl utsl/p4/perlext/Compiler utsl/p4/perlext/Thread utsl/p4/relperl utsl/p4/thrperl utsl/p4/win32/perl ^perl-5.003 ^perl-5.004_04 | perl -nle 'BEGIN{$i=176386;}m{^commit (.*)} && ($commit=$1); m{p4raw-id: (.*)@(\d+)} && do{ ++$i; print "\@pv\@ 3 \@db.marks\@ $i \@$commit@\n\@pv\@ 3 \@db.change_marks\@ \@$1\@ $2 $i"}' > ../p4raw-extra-published-1.asv

   there should be a command to drop all the change marks we know
   about and then re-read them from all the branches we can see.

 - unexport-commits doesn't rewind the p4/* head pointers.  You
   currently have to blow them all away and pipe the output of
   'git-p4raw show-branches N' to figure out which refs to write;

   rm -r .git/refs/heads/p4
   git-p4raw show-branches 138 | sed 's!//depot!refs/heads/p4!' | while read ref x commit; do git-update-ref $ref $commit; done

 - refactoring:

   - getopt fragment used by many commands for subcommand argument
     passing.

   - use row iterator functions rather than pure DBI

 - the "p4raw.source" config option should be used more to find the
   path for input and depot files by the other various commands.

- normalize out all paths from various tables
  create triggers to handle normalizing during insert/updates

- figure out how to support multiple version of the rev table.
  I think the second column in the checkpoint is the db file 
  revisions number but not 100% sure.
  Doc for original impl:
  ftp://ftp.perforce.com/perforce/r06.1/doc/schema/index.html#db.rev
  Doc for my depot:
  ftp://ftp.perforce.com/perforce/r09.2/doc/schema/index.html#db.rev
  Doc for latest db version:
  ftp://ftp.perforce.com/perforce/r10.2/doc/schema/index.html#IntegHow

- add incremental load support
